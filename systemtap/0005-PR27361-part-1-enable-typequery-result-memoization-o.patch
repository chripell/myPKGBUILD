From f7124b59df76ec1caf6814691a8451dcd9d52ad4 Mon Sep 17 00:00:00 2001
From: "Frank Ch. Eigler" <fche@redhat.com>
Date: Sat, 6 Feb 2021 21:09:24 -0500
Subject: [PATCH 5/6] PR27361 part 1: enable typequery result memoization &
 operation on linux 5.11

Linux 5.11 rejects previous kmod_typequery .c files because they don't
have a MODULE_LICENSE bit.  Here, stap tries and tries and tries
building kmod_typequery files, up to thousands (!).  We solve the
first by adding the MODULE_LICENSE.  We solve the second by memoizing
typequery build results (whether they succeed or fail) in the
systemtap_session object.
---
 buildrun.cxx | 18 +++++++++++++++++-
 session.cxx  |  1 +
 session.h    |  3 ++-
 3 files changed, 20 insertions(+), 2 deletions(-)

diff --git a/buildrun.cxx b/buildrun.cxx
index ab447ef29..8d48de0f4 100644
--- a/buildrun.cxx
+++ b/buildrun.cxx
@@ -1120,9 +1120,14 @@ make_typequery_kmod(systemtap_session& s, const vector<string>& headers, string&
   omf << "obj-m := " + basename + ".o" << endl;
   omf.close();
 
-  // create our empty source file
+  // create our -nearly- empty source file
   string source(dir + "/" + basename + ".c");
   ofstream osrc(source.c_str());
+
+  // this is mandated by linux kbuild as of 5.11+
+  osrc << "#include <linux/module.h>" << endl;
+  osrc << "MODULE_LICENSE(\"GPL\");" << endl;
+  
   osrc.close();
 
   // make the module
@@ -1169,6 +1174,13 @@ make_typequery_umod(systemtap_session& s, const vector<string>& headers, string&
 int
 make_typequery(systemtap_session& s, string& module)
 {
+  // check our memoized cache first
+  if (s.typequery_memo.find(module) != s.typequery_memo.end())
+    {
+      module = s.typequery_memo.at(module);
+      return 0;
+    }
+    
   int rc;
   string new_module;
   vector<string> headers;
@@ -1196,6 +1208,10 @@ make_typequery(systemtap_session& s, string& module)
   else
       rc = make_typequery_umod(s, headers, new_module);
 
+  // memoize the result --- even if it failed (rc != 0), so as to avoid
+  // repeated attempts to rebuild the same thing
+  s.typequery_memo[module] = new_module;
+  
   if (!rc)
     module = new_module;
 
diff --git a/session.cxx b/session.cxx
index 5eba02966..4eb67102c 100644
--- a/session.cxx
+++ b/session.cxx
@@ -377,6 +377,7 @@ systemtap_session::systemtap_session (const systemtap_session& other,
   no_global_var_display = other.no_global_var_display;
   pass_1a_complete = other.pass_1a_complete;
   timeout = other.timeout;
+  // don't bother copy typequery_memo
 
   include_path = other.include_path;
   runtime_path = other.runtime_path;
diff --git a/session.h b/session.h
index 38f1d66de..c2c6fbaad 100644
--- a/session.h
+++ b/session.h
@@ -239,7 +239,8 @@ public:
   bool monitor;
   int monitor_interval;
   int timeout; // in ms
-
+  std::map<std::string,std::string> typequery_memo;
+  
   enum
    { dump_none,               // no dumping requested
      dump_probe_types,        // dump standard tapset probes
-- 
2.31.1

